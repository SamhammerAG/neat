@charset "UTF-8";
/// Push or pull a grid column by manipulating its left PADDING.
///
/// @group features
///
/// @name Grid padding
///
/// @argument {number (unitless)} $push [false]
///   The number of columns to push the column.
///
/// @argument {map} $grid [$neat-grid]
///   The grid to be used to determine how far to push the column.
///   By default, the global `$neat-grid` will be used.
///
/// @example scss
///   .element {
///     @include grid-padding(3);
///   }
///
/// @example css
///   .element {
///     padding-left: calc(25% - 25px + 40px);
///   }

@mixin grid-padding($push: false, $grid: $neat-grid) {
  $_grid-columns: _retrieve-neat-setting($grid, columns);
  $_grid-gutter: _retrieve-neat-setting($grid, gutter);

  @if $push {
    $_gutter-affordance: $_grid-gutter;
    $_padding-value: calc(#{_neat-column-width($grid, $push)} + #{$_gutter-affordance});
    padding-#{_neat-float-direction($grid)}: $_padding-value;
  } @else {
    $_padding-value: _retrieve-neat-setting($grid, gutter);
    padding-#{_neat-float-direction($grid)}: $_padding-value;
  }
}